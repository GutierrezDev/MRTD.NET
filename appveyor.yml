version: 1.0.{build}
skip_tags: true
clone_folder: C:\Projects\MRTD.NET\
configuration: Debug
environment:
  COVERALLS_REPO_TOKEN:
    secure: XWiL6LEQaVhFTVjsb0NUG37Zdv5uenF7aKl0Vhkre446M8zElJKfqL8R+RuvLGlp
before_build:
  - nuget restore ".\MRTD.NET.sln"
build:
  project: .\MRTD.NET.sln
  verbosity: minimal
notifications:
- provider: GitHubPullRequest
  on_build_success: true
  on_build_failure: true
  on_build_status_changed: true
test_script:
- ps: >-
    .\packages\OpenCover.*\tools\OpenCover.Console.exe -register:user -target:nunit3-console.exe "-targetargs:""SmartCardApi\bin\$env:CONFIGURATION\SmartCardApi.dll" "DemoApp\bin\$env:CONFIGURATION\DemoApp.dll"" " -filter:"+[SmartCardApi*]*" -output:opencoverCoverage.xml

    $coveralls = (Resolve-Path "packages/coveralls.net.*/tools/csmacnz.Coveralls.exe").ToString()
    
    $env:APPVEYOR_BUILD_NUMBER
    
    & $coveralls --opencover -i opencoverCoverage.xml --repoToken $env:COVERALLS_REPO_TOKEN --useRelativePaths --commitId $env:APPVEYOR_REPO_COMMIT --commitBranch $env:APPVEYOR_REPO_BRANCH --commitAuthor $env:APPVEYOR_REPO_COMMIT_AUTHOR --commitEmail $env:APPVEYOR_REPO_COMMIT_AUTHOR_EMAIL --commitMessage $env:APPVEYOR_REPO_COMMIT_MESSAGE --jobId $env:APPVEYOR_BUILD_NUMBER --serviceName appveyor

deploy:
  provider: NuGet
  api_key:
    secure: s3gihCN9WhquZpWxA5mLHS7FppnfthVRtjFpWSZAcetJyV4RvE8zRWzMM3pHia77
  skip_symbols: false
  artifact: .\SmartCardApi\*.nupkg
before_deploy:
- ps:
    $projectName = "SmartCardApi"

    $csprojName = $projectName + ".csproj"

    function replaceSymbolsInFile($regex, $path) 
    {   
        (Get-Content $path) -replace $regex,'' | out-file $path 
    }

    $testCSFilesRegex = '<Compile Include="(\S+\.test\.cs)" />'

    $csprojPath = "SmartCardApi\" + $csprojName

    replaceSymbolsInFile $testCSFilesRegex $csprojPath

    $pakageNames = @(
        "Nunit",
        "OpenCover",
        "coveralls.net"
    )

    $packagesConfigPath = "SmartCardApi\packages.config"

    Foreach($packageName in $pakageNames) {

        $packagesRegexTemplate = '<package id="PACKAGE_NAME"(.{1,})'

        $packagesRegex = $packagesRegexTemplate -replace "PACKAGE_NAME", $packageName

        replaceSymbolsInFile $packagesRegex $packagesConfigPath

    }